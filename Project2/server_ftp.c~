/*
  author: Dane Emmerson
  Due Date: 3/1/2020
  Description: Server side part of program to implement basic ftp
               for transfer of text file to client program. See
	       README for more details.
  sources: https://beej.us/guide/bgnet/html/#system-calls-or-bust
 */
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>

#include "server_ftp.h"

/*
  name: receive_message
  arguments: fd - filedescriptor where we are sending message
                  *buffer may or may not contain a cstring allocated/recvd from previous
		         call to receive_message
  description: Make sure buffer is filled with null bytes, then receive message.
 */
void receive_message(int fd, char** buffer){
  char* temp = "\n.\n";
  int num_bytes = 0, buffer_size = 0;

  /* enter loop to recv from sender, but only allocate memory on an as needed basis */
  do{
    if(buffer_size <= (num_bytes + MESSAGE_SIZE_RECV)){
      buffer_size += MESSAGE_SIZE_RECV;
      *buffer = realloc(*buffer, 
		       sizeof(char) * (buffer_size + 1));
      memset(*(buffer + num_bytes), '\0', 
	     (buffer_size - num_bytes + 1) * sizeof(char));
    }
    num_bytes += recv(fd, *buffer, MESSAGE_SIZE_RECV, 0);
  }while(strstr(*buffer, temp) == NULL);

  /* ensure last byte is still nullbyte, then strip off "\n.\n" delimiter */
  (*buffer)[num_bytes] = (*buffer)[num_bytes - 1] = (*buffer)[num_bytes - 2] 
    = (*buffer)[num_bytes - 3] = '\0';
  printf("%s\n", *buffer);
}

/* name: open_sock
   preconditions:
   postconditions:
   description:

 */
void open_sock(char** argv, int* sockfd, struct addrinfo** serverinfo){
  struct addrinfo hints, *p;
  int status;
  int yes = 1;

  memset(&hints, 0, sizeof hints);
  hints.ai_family = AF_UNSPEC;
  hints.ai_socktype = SOCK_STREAM;
  hints.ai_flags = AI_PASSIVE;
  if((status = getaddrinfo(NULL, argv[1], &hints, serverinfo)) != 0){
    fprintf(stderr, "getaddrinfo error: %s\n", gai_strerror(status));
    exit(1);
  }
  
  if((*sockfd = socket((*serverinfo)->ai_family, (*serverinfo)->ai_socktype, (*serverinfo)->ai_protocol)) == -1){
    fprintf(stderr, "socket error: %s\n", gai_strerror(*sockfd));
    exit(1);
  }
  
  for(p = *serverinfo; p != NULL; p = p->ai_next) {
    if((*sockfd = socket(p->ai_family, p->ai_socktype,
			  p->ai_protocol)) == -1) {
      perror("server: socket");
      continue;
    }
    
    if(setsockopt(*sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
		  sizeof(int)) == -1) {
      perror("setsockopt");
      exit(1);
    }
    
    if(bind(*sockfd, p->ai_addr, p->ai_addrlen) == -1) {
      close(*sockfd);
      perror("server: bind");
      continue;
    }
    
    break;
  }
  freeaddrinfo(*serverinfo);


  if (p == NULL)  {
    fprintf(stderr, "server: failed to bind\n");
    exit(1);
  }

}
/*
  name: server_listen
  preconditions: sockfd contains valid file descriptor to open socket
  postconditions: server is now listening on port specified by file descriptor
  description: Calls listen system call on provided file descriptor. If fails,
               prints error to std error and exits program.
 */
void server_listen(int sockfd, char* port){
  if(listen(sockfd, BACKLOG) == -1) {
    perror("listen");
    exit(1);
  }
  printf("Listening on port %s\n", port);
}

/*
  name: accept_connection
  preconditions: sockfd contains valid file descriptor to open socket
                 serverinfo struct is completed by getaddrinfo()
		 ip4 contains ipv4 address as cstring
  postconditions: *newfd now contains valid file descriptor to socket connected to client
  description: accepts a connection from client. Print message to console indicating
               connection has been accepted and ip address of client.
 */
int accept_connection(int sockfd, int* newfd, struct addrinfo* serverinfo,char* ip4){
  socklen_t addr_size;
  struct sockaddr_storage their_addr;
  *newfd = accept(sockfd, (struct sockaddr*)&their_addr, &addr_size);
  if(*newfd == -1){
    perror("accept");
    return -1;
  }
  inet_ntop(AF_INET, &(serverinfo->ai_addr), ip4, INET_ADDRSTRLEN);
  printf("server got a connection from %s\n",ip4);
  return 0;
}

/*
  name: set_host_name
  preconditions: host_name is the address the cstring location to store user input host name
  postconditions: host_name has been obtained from user, memory has been allocated.
  description: Take address of location to store host name, prompt user for input
 */
void set_host_name(char** host_name){
  size_t name_length = HOST_NAME_LENGTH;
  
  *host_name = malloc((HOST_NAME_LENGTH + 1) * sizeof(char));
  memset(*host_name, '\0', HOST_NAME_LENGTH + 1);
  /* set a name for the server host */
  printf("Enter a name to be assigned to this host: ");
  getline(host_name, &name_length, stdin);
  (*host_name)[strlen(*host_name) - 1] = '\0';
  (*host_name)[HOST_NAME_LENGTH] = '\0';  
}
